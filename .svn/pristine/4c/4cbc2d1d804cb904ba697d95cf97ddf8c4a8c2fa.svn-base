package com.cubic.rest;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;

import org.springframework.stereotype.Service;

import com.cubic.service.CustomerMemoryDB;
import com.cubic.vo.CustomerVO;



@Service
@Path("/customer")
public class CUstomerRest {

	@GET
	public String Welcome(){
		return "REST WEB SERVICES ";
	}
	
	@GET
	@Path("/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getCustomer(@PathParam("id")final Long pk){
		final CustomerVO entity = CustomerMemoryDB.get().getCustomer(pk);
		return Response.ok().entity(entity).build();
	}
	
	@GET
	@Path("/all")
	@Produces(MediaType.APPLICATION_XML)
	public Response getCustomers(){
		final List<CustomerVO> customers = CustomerMemoryDB.get().getCustomers();
		 CustomerList entity = new CustomerList(customers);
		 return Response.ok().entity(entity).build();
	}
	
	@POST
	@Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON})
	@Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON})
	public Response createCustomer(final CustomerVO vo){
		final CustomerVO entity = CustomerMemoryDB.get().addCustomer(vo);
		ResponseBuilder rb = Response.ok();
		if(vo.getFirstName().startsWith("J")){
				rb = rb.type(MediaType.APPLICATION_XML);
		}
		else{
			rb = rb.type(MediaType.APPLICATION_JSON);
			
			
		}
		return rb.entity(entity).build();
	}
		
		@PUT
		@Path("/{id}")
		@Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON})
		@Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON})
		public Response updateCustomer(final CustomerVO vo) {
			final CustomerVO result = CustomerMemoryDB.get().updateCustomer(vo);
			return Response.ok().entity(result).build();

		}
		
		
		@DELETE
		@Path("/{id}")
		public Response removeCustomer(@PathParam("id") final Long pk) {
			CustomerMemoryDB.get().removeCustomer(pk);
			return Response.noContent().build();
		}
}


		
		


